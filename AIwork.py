import openai
import gspread
import re
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, MessageHandler, CallbackQueryHandler, ContextTypes, filters, CommandHandler
from datetime import datetime
from collections import deque

# === CONFIG ===
TELEGRAM_BOT_TOKEN = "7602071981:AAHNZrSY-t-Ugcx4WWaF7dlUC0RG8hg8TN0"
OPENAI_API_KEY = "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"
DOCUMENT_ID = "171aUnZqALyEUXxRq78165PwhVRy9YiUNhsCn_nLOIxg"
GOOGLE_SHEET_ID = "1kfytBMdv__jyvmWyWyOZdWn5twf15EcxrT85Kcbqow4"
SERVICE_ACCOUNT_FILE = "aiwork-462523-a43dd894c81b.json"

# === GOOGLE AUTH ===
SCOPES = ['https://www.googleapis.com/auth/documents.readonly', 'https://www.googleapis.com/auth/spreadsheets']
creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
doc_service = build('docs', 'v1', credentials=creds)
gsheet_client = gspread.authorize(creds)
sheet = gsheet_client.open_by_key(GOOGLE_SHEET_ID)
log_sheet = sheet.worksheet("–õ–æ–≥–∏")
buttons_sheet = sheet.worksheet("–ö–Ω–æ–ø–∫–∏")
users_sheet = sheet.worksheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

# === LOAD SYSTEM PROMPT ===
system_prompt = (
    "–¢—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å –∫–æ–º–ø–∞–Ω–∏—é AIwork, –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π. "
    "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ò–ò-–±–æ—Ç–∞–º ü§ñ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. "
    "–û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ, —è—Å–Ω–æ, —Å –≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ–º, –¥–æ–±–∞–≤–ª—è–π —Å–º–∞–π–ª—ã –∏ –ø—Ä–∏–º–µ—Ä—ã üõçÔ∏èüìà. "
    "–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å, –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–≥–æ–¥—ã, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –∏ —ç–∫–æ–Ω–æ–º–∏—é –≤—Ä–µ–º–µ–Ω–∏ ‚è≥. "
    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å * –∏–ª–∏ _. –ü–∏—à–∏ –ª–µ–≥–∫–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏ üòä."
)

# === MEMORY & STATE ===
user_memory = {}
user_states = {}

def get_gdoc_content():
    doc = doc_service.documents().get(documentId=DOCUMENT_ID).execute()
    content = ''
    for element in doc.get("body", {}).get("content", []):
        for e in element.get("paragraph", {}).get("elements", []):
            if 'textRun' in e:
                content += e['textRun']['content']
    return content

def get_bottom_example_keyboard():
    keyboard = [
        ["–ò–ò-–±–æ—Ç –≤ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ ü§ñ"],
        ["–ö–æ–Ω—Ç–∞–∫—Ç—ã üìû", "–ö–µ–π—Å—ã üíº"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def log_to_sheet(user_id, username, message, response):
    log_sheet.append_row([
        str(datetime.now()), str(user_id), username or "", message, response
    ])

def add_or_update_user(user_id, username):
    str_user_id = str(user_id)
    all_data = users_sheet.get_all_values()
    headers = all_data[0]
    records = all_data[1:]

    id_column = [row[0] for row in records]
    now_str = str(datetime.now())

    if str_user_id in id_column:
        row_index = id_column.index(str_user_id) + 2  # +2: 1 for header, 1 for 1-based indexing
        users_sheet.update_cell(row_index, 3, now_str)
    else:
        users_sheet.append_row([str_user_id, username or "", now_str])

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.edit_text("–ö–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ Google Sheets –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")

async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    add_or_update_user(user_id, username)
    user_states[user_id] = "normal"

    if user_id not in user_memory:
        user_memory[user_id] = deque(maxlen=10)

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç AIwork ü§ñ. "
        "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞? ‚è≥ "
        "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ò–ò-–±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ."
    )
    await update.message.reply_text(welcome_text, reply_markup=get_bottom_example_keyboard())
    log_to_sheet(user_id, username, "/start", welcome_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    add_or_update_user(user_id, username)
    state = user_states.get(user_id, "normal")

    if user_id not in user_memory:
        user_memory[user_id] = deque(maxlen=10)

    openai.api_key = OPENAI_API_KEY

    if user_message == "–ò–ò-–±–æ—Ç –≤ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ ü§ñ":
        user_states[user_id] = "awaiting_business"
        await update.message.reply_text(
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ –æ —Å–≤–æ—ë–º –±–∏–∑–Ω–µ—Å–µ, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –ò–ò-–±–æ—Ç–∞ –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å.",
            reply_markup=None
        )
        return

    if user_message == "–ö–æ–Ω—Ç–∞–∫—Ç—ã üìû":
        contacts_text = (
            "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω: +7 901 368 56 09\n"
            "–¢–µ–ª–µ–≥—Ä–∞–º: @AIwork_mozhaev\n"
            "–ë—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å! üòä"
        )
        await update.message.reply_text(contacts_text, reply_markup=get_bottom_example_keyboard())
        log_to_sheet(user_id, username, user_message, contacts_text)
        return

    if user_message == "–ö–µ–π—Å—ã üíº":
        cases_text = "–ì–æ—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å - @AIwork_bots"
        await update.message.reply_text(cases_text, reply_markup=get_bottom_example_keyboard())
        log_to_sheet(user_id, username, user_message, cases_text)
        return

    if state == "awaiting_business":
        business_desc = user_message.strip()
        prompt_for_example = (
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∏–∑–Ω–µ—Å: {business_desc}. "
            "–û–ø–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ, –∫–∞–∫ –ò–ò-–±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–º—É –±–∏–∑–Ω–µ—Å—É, "
            "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ –≤—ã–≥–æ–¥–∞—Ö, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–µ–Ω–µ–≥, –ø—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã. "
            "–ü—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ –¥–µ–ª–∞–π —É–ø–æ—Ä –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–µ–Ω–µ–≥ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. "
            "–ü–∏—à–∏ –ø—Ä–æ—Å—Ç–æ, –ø–æ–Ω—è—Ç–Ω–æ, –¥–æ–±–∞–≤—å —Å–º–∞–π–ª—ã –∏ –∏–∑–±–µ–≥–∞–π —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∏–∞–ª–æ–≥–∞."
        )

        messages_for_example = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt_for_example}
        ]

        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages_for_example,
            temperature=0.7,
            max_tokens=600
        )

        reply = response['choices'][0]['message']['content']
        user_states[user_id] = "normal"
        await update.message.reply_text(reply, reply_markup=get_bottom_example_keyboard())
        log_to_sheet(user_id, username, user_message, reply)
        return

    # --- –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ OpenAI ---
    gdoc_content = get_gdoc_content()

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n{gdoc_content}"}
    ]
    messages.extend(user_memory[user_id])
    messages.append({"role": "user", "content": user_message})

    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=messages,
        temperature=0.7,
        max_tokens=500
    )

    raw_reply = response['choices'][0]['message']['content']
    clean_reply = re.sub(r'[*]', '', raw_reply)
    readable_reply = re.sub(r'([:!.])\s*', r'\1\n', clean_reply)

    user_memory[user_id].append({"role": "user", "content": user_message})
    user_memory[user_id].append({"role": "assistant", "content": readable_reply})

    await update.message.reply_text(readable_reply, reply_markup=get_bottom_example_keyboard())
    log_to_sheet(user_id, username, user_message, readable_reply)

# === MAIN ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", handle_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()